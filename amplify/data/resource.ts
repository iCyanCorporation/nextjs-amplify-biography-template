import { type ClientSchema, a, defineData } from "@aws-amplify/backend";

/*== Data ===============================================================
The section below creates a database table with fields.
=========================================================================*/
const schema = a.schema({
  Blog: a
    .model({
      title: a.string(),
      imgUrl: a.string(),
      content: a.string(), // markdown content
      category: a.string(),
      tags: a.string().array(),
      createdAt: a.datetime(),
      updatedAt: a.datetime(),
    })
    .authorization((allow) => [allow.publicApiKey(), allow.owner()]),

  ProductType: a
    .model({
      name: a.string().required(),
      description: a.string(),
      // products field will be auto-generated by the hasMany relationship
      createdAt: a.datetime(),
      updatedAt: a.datetime(),
    })
    .authorization((allow) => [allow.publicApiKey(), allow.owner()]),

  Product: a
    .model({
      name: a.string().required(),
      description: a.string(),
      price: a.float().required(),
      stock: a.integer().required(),
      imgUrl: a.string(),
      isActive: a.boolean().default(true),
      productTypeID: a.string(), // Add explicit ID field for the foreign key
      // orders will be handled by the join table
      createdAt: a.datetime(),
      updatedAt: a.datetime(),
    })
    .authorization((allow) => [allow.publicApiKey(), allow.owner()]),

  Order: a
    .model({
      orderNumber: a.string().required(),
      customerName: a.string().required(),
      customerEmail: a.string().required(),
      status: a.enum([
        "pending",
        "processing",
        "shipped",
        "delivered",
        "cancelled",
      ]),
      totalAmount: a.float().required(),
      // products will be handled by the join table
      shippingAddress: a.string(),
      paymentInfo: a.string(),
      createdAt: a.datetime(),
      updatedAt: a.datetime(),
    })
    .authorization((allow) => [allow.publicApiKey(), allow.owner()]),

  OrderProduct: a
    .model({
      orderID: a.string(), // Add explicit ID field for the foreign key
      productID: a.string(), // Add explicit ID field for the foreign key
      quantity: a.integer().required(),
      priceAtPurchase: a.float().required(),
    })
    .authorization((allow) => [allow.publicApiKey(), allow.owner()]),

  Settings: a
    .model({
      key: a.string(),
      value: a.string(),
      description: a.string(),
      group: a.string(),
      createdAt: a.datetime(),
      updatedAt: a.datetime(),
    })
    .authorization((allow) => [allow.publicApiKey(), allow.owner()]),
});

export type Schema = ClientSchema<typeof schema>;

/*== Auth ===============================================================
The section below creates an auth for the database table.
=========================================================================*/
export const data = defineData({
  schema,
  authorizationModes: {
    defaultAuthorizationMode: "apiKey",
    apiKeyAuthorizationMode: {
      expiresInDays: 365,
    },
  },
});
